import javax.annotation.Nullable
import javax.inject.Inject

plugins {
    id 'com.android.application'
    id 'com.aaron.custom'
    id 'com.google.protobuf'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.aaron.hookpractice"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails resolveDetails ->
                def request = resolveDetails.requested
                if (request.group == '' && request.name == '') {
                    resolveDetails.useVersion('3.10.1')
                }
        }
    }
}


//configurations {
//    Configuration conf = project.configurations.getByName()
//    conf.incoming.beforeResolve {
//        conf.dependencies
//    }
//}


protobuf {
    //配置 protoc 编译器
    protoc {
        artifact = 'com.google.protobuf:protoc:3.19.2'
    }
    //配置生成目录，编译后会在 build 的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation 'android.arch.navigation:navigation-fragment:1.0.0'
    implementation 'android.arch.navigation:navigation-ui:1.0.0'
    implementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation project(':dibinder')

    implementation project(':annotation')
    annotationProcessor project(':compiler')
}

def hello = tasks.register("HelloTask", HelloTask) {
    group = "hello"
    description = "this is a custom task, affilating to hello group"
    content = "this is a custom task, affilating to hello group"

    doFirst {
        println('------ do first --------')

    }
}

def bye = tasks.register("bye") {
    group="hello"
    description = "a task affilates to hello"

    println("------ bye bye. ------")
    doLast {
        print("do last bye")
    }

    dependsOn(hello)
}

def cancel = tasks.register("cancel") {
    group="hello"

    finalizedBy(bye)

    print("------- cancel ------")
    doLast {
        print("do last cancel")
    }

    onlyIf {
        !project.hasProperty("skip")
    }
}

tasks.register("copy", CopyTask) {
    group="hello"
    doFirst {
        print("-------- 执行CopyTask --------")
    }
    fromFile = files("from")
    toDir=layout.projectDirectory.dir("to")
}


class HelloTask extends DefaultTask {
    @Internal
    def content

    @TaskAction
    def hi(){
        print("hi hi ${content}")
    }

    @TaskAction
    def refuse() {
        println("go go go away, ${name}")
    }
}

class CopyTask extends DefaultTask {
    @Incremental
    @InputFiles
    FileCollection fromFile

    @OutputDirectory
    Directory toDir

    @TaskAction
    def execute(InputChanges inputChanges) {
        File file = fromFile.getSingleFile()
        if (file.isDirectory()) {
            fromFile.getAsFileTree().each {
                copyFile2Dir(it, toDir)
            }
        } else {
            copyFile2Dir(file, toDir)
        }
    }

    static def copyFile2Dir(File src, Directory toDir) {
        if (src == null || toDir == null) {
            return
        }

        File dest = new File("${toDir.getAsFile().path}/${src.name}")
        if (!dest.exists()) {
            dest.createNewFile()
        }

        dest.withOutputStream {
            it.write(new FileInputStream(src).getBytes())
        }
    }
}
